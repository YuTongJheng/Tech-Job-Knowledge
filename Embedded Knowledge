======================================================================
mutex lock semaphore
Binary semaphore與Mutex的差異：
在有的系統中Binary semaphore與Mutex是沒有差異的。
在有的系統上，主要的差異是mutex一定要由獲得鎖的進程來釋放。
而semaphore可以由其它進程釋放（這時的semaphore實際就是個原子的變量，大家可以加或減），
因此semaphore可以用於進程間同步。 
Semaphore的同步功能是所有系統都支持的，而Mutex能否由其他進程釋放則未定，因此建議mutex只用於保護critical section。
而semaphore則用於保護某變量，或者同步。

同步:initial:0
保護:initial:1

race condition
競爭危害
電腦的兩個行程都試圖修改一個共享記憶體的內容。
在沒有並行控制的情況下，最後的結果依賴於兩個行程的執行順序與時機，特別是如果發生了並行存取衝突，則最後的結果是不正確的。
////////////////////////////////////

Mutex:

Is a key to a toilet. One person can have the key - occupy the toilet - at the time.
When finished, the person gives (frees) the key to the next person in the queue.

Officially: 
"Mutexes are typically used to serialise access to a section of re-entrant code 
that cannot be executed concurrently by more than one thread. 
A mutex object only allows one thread into a controlled section, 
forcing other threads which attempt to gain access to 
that section to wait until the first thread has exited from that section."

Ref: Symbian Developer Library

(A mutex is really a semaphore with value 1.)

Semaphore:

Is the number of free identical toilet keys. 
Example, say we have four toilets with identical locks and keys. 
The semaphore count - the count of keys - is set to 4 at beginning (all four toilets are free), 
then the count value is decremented as people are coming in. 
If all toilets are full, ie. there are no free keys left, the semaphore count is 0. 
Now, when eq. one person leaves the toilet, semaphore is increased to 1 (one free key), 
and given to the next person in the queue.

Officially: 
"A semaphore restricts the number of simultaneous users of a shared resource up to a maximum number. 
Threads can request access to the resource (decrementing the semaphore), 
and can signal that they have finished using the resource (incrementing the semaphore)."

Semaphore vs mutex
首先要從兩者要處理的問題開始說起

semaphore是為了處理資源分配的問題 假設有一或多個資源 且有數個process要進入critical section 
這邊會使用semaphore去計數process的數量 當資源被釋放時則讓下一個process進入 
所以他會有一個變數紀錄有多少剩餘資源或是多少process在等待
因此semaphore是一個counter


mutex是為了處理thread中的mutaul exclusion還有避免unbounded priority inversion
在thread中資源是共享的 當不同thread要對global做存取時就可能出現問題
例如一個thread在更新變數而另一個在讀取
mutex就是一個lock 取得lock的thread可以存取 其他則不行 直到lock被釋放
他不會知道有多少thread在等待
是有跟無的差別
至於如何避免unbounded priority inversion
可以設置一個timer看如果某個thread取得lock過久 就會將lock釋放
高priority的thread即可取得lock而不會造成低priority的thread拿著lock而高priority thread無法執行的情況

//////////////////////////////////////

Semaphore  vs spinlock

semaphore
這邊以POSIX為例
process在sem_wait()失敗時會進行context switch將cpu交出 
改變process狀態進入睡眠(在某些RTOS還有 wait_semaphore的state) 然後排入waiting queue 
讓其他process可以執行直到資源釋放 原本process才會在放入run queue
這牽扯到process狀態的改變

spinlock
spinlock利用test and set這個指令看有沒有辦法取得lock 因為是指令層級的操作所以有辦法達到atomic
當lock無法取得時會用polling的方式不斷嘗試
特別的地方是當他取得lock時 process將不會進入睡眠（沒有context switch）
這有幾個好處
1.效能會比semaphore好 因為他不做context switch可以一直執行
2.在SMP環境中 因為process不會進入睡眠 無法執行其他process或處理interrupt
會將工作分擔給其他cpu（但在單cpu情況下就像是disable interrup）

==================================
Q:
1. user mode、kernel mode 的差別？
2. trap 是什麼？
3. 簡單解釋 system call 流程。

ANS:
1. Kernel mode權限較大，可以任意存取週邊設備。User mode 則是會有受限，應用程式都是在user mode執行

2. Trap是軟體中斷。

3. 呼叫SYSTEM CALL=>傳參數給ISR=>OS執行軟體中斷(trap)將user mode切換成kernel mode，
  OS經由傳入的參數呼叫對應的ISR，執行ISR=>完成後回到user mode。

==================================
何謂deadlock?

一組processes陷入互相等待的情況(Circular waiting)
造成processes接無法往下執行，使得CPU utilization及Throughput大幅降低

1. Mutual exclusion   : 一個資源一次只能被一個process所使用
2. Hold and Wait      : process取得一個資源之後等待其他的資源
3. No preemption      : 資源只能由process自己釋放，不能由其他方式釋放
4. Circular wait      : 每個process都握有另一個process請求的資源，導致每一個process都在等待另一個process釋放資源

1.	Mutual exclusion(互斥)
Def：
資源在同一時間內，至多只允許一個process使用(不允許≥2個processes同時使用)
其它欲使用此resource的process必須wait，直到該process釋放resource為止
eg. printer、Disk、CPU etc.
eg. 不具mutual exclusion→Read-only File

2.	Hold & wait(持有並等待) (Partial Allocation)
Def：
process持有部分資源且又在等待其它processes所持有的資源

3.	No preemption(不可強取豪奪)
Def：
process不可搶奪其它waiting process所持有的資源，除非其自願釋放

4.	Circular waiting(循環等待)
Def：
存在一組process
P0→P1→P2→...→Pn→P0
P0~Pn形成Circular waiting

(wait)----->P0---(wait)->P1
  ^                      |
  |                      V
  P3(wait)<----P2<----(wait)

解法:

打破四個必要條件之其一，就可保證死結永不發生
打破"Hold&Wait"
作法：OS可採取下列二個協定之一即可
協定一
除非process可以一次取得完成工作所需的全部資源，才允許process持有資源，否則不准持有任何資源
協定二
允許process在執行之初可先持有部分資源，一旦要申請新資源，則必須先釋放持有的全部資源，才可以提申請

打破"No Preemption"
作法：改為preemption即可
process可以搶奪waiting process所持有的Resource
Note：死結不會發生。但有可能產生starvation
解決：採取類似"Aging"技術(將被搶奪的次數，列為提高優先權之依據)

============================================
Big endian or Little endian
前置知識:

Ex: long MyData=0x12345678，要寫到從0x0000開始的記憶體位址時。

如果是Big Endian的系統：
存到記憶體會變成 0x12 0x34 0x56 0x78，最高位元組在位址最低位元，最低位元組在位址最高位元，依次排列。

如果是Little Endian的系統：
存到記憶體會變成 0x78 0x56 0x34 0x12，最低位元組在最高位元，最高位元組在最低位元，反序排列。

比較的結果就是這樣：
big-endian  little-endian
0x0000  0x12  0x78
0x0001  0x34  0x56
0x0002  0x56  0x34
0x0003  0x78  0x12

////////////////////////////////////////
Q:
判斷CPU是big endian or little endian

ANS:
int main() {
    unsigned int i = 1;
    char *c = (char*)&i;
    if (*c)    
        printf("Little endian\n");
    else
        printf("Big endian\n");
 
    return 0;
}

解釋:
unsigned int i = 1; ---> i = 0x00000001
char 型態為1 byte，指向轉型為 char 的 unsigned int
則此轉型會造成存放方式會有以下差異:

  big-endian  little-endian
0x0000  0x00  0x01
0x0001  0x00  0x00
0x0002  0x00  0x00
0x0003  0x01  0x00

而 char 只有1 byte的空間，因此只會擷取到 unsigned int 的最低位址
所以結果會有 0 or 1 的差異。

※此檢查法值需要為 1 or...若為0則會有錯誤的結果

============================================
Big endian & little endian swap
unsigned uint32_t swap_uint32( uint32_t val )
{
    val = ((val << 8) & 0xFF00FF00 ) | ((val >> 8) & 0xFF00FF ); 
    return (val << 16) | (val >> 16);
}

===================================================
DMA:
DMA是所有現代電腦的重要特色，他允許不同速度的硬體裝置來溝通，而不需要依於中央處理器的大量中斷負載。
否則，中央處理器需要從來源把每一片段的資料複製到暫存器，然後把他們再次寫回到新的地方。
在這個時間中，中央處理器對於其他的工作來說就無法使用。

DMA傳輸常使用在將一個記憶體區從一個裝置複製到另外一個。
當中央處理器初始化這個傳輸動作，傳輸動作本身是由DMA控制器來實行和完成。
典型的例子就是移動一個外部記憶體的區塊到晶片內部更快的記憶體去。
像是這樣的操作並沒有讓處理器工作拖延，使其可以被重新排程去處理其他的工作。
DMA傳輸對於高效能嵌入式系統演算法和網路是很重要的。

===============================================
uClinux 與 Linux 最大差異在哪？

uClinux沒有MMU管理存儲器，

其對內存的訪問是直接的，所有程序中訪問的地址都是實際的物理地址。
操作系統對內存空間沒有保護，各個進程實際上共享一個運行空間。
這就需要實現多進程時進行數據保護，也導致了用戶程序使用的空間可能佔用到系統內核空間。
這些問題在編程時都需要多加注意，否則容易導致系統崩潰。

記憶體管理單元（英語：memory management unit，縮寫為MMU），
有時稱作分頁記憶體管理單元（英語：paged memory management unit，縮寫為PMMU）。
它是一種負責處理中央處理器（CPU）的記憶體存取請求的電腦硬體。
它的功能包括虛擬位址到實體位址的轉換（即虛擬記憶體管理）、記憶體保護、中央處理器快取的控制，
在較為簡單的電腦體系結構中，負責匯流排的仲裁以及儲存體切換（bank switching，尤其是在8位元的系統上）。

===============================================
列舉幾個serial port, parallel port，序列埠(serial port)、平行埠(parallel port)

Serial port : RS232、示波器

parallel port: 印表機、LPT

===============================================
如何 Linux 與 windows 互相傳送檔案？
ftp、網路空間、samba。

PS:samba:可以讓linux跟windows形同運作”網路上的芳鄰”一樣存取檔案

==================================================
中斷前置知識:

所有中斷:
1.內部中斷
2.外部(硬體)中斷
3.軟體中斷

處理中斷信號步驟
判斷部份
CPU將正在執行的指令正常地結束,檢查中斷信號是否發生
if(發生中斷信號){
  if(信號沒被禁止){
     if(信號優先權>程式優先權){開始信號處理}else{繼續執行程式以後在處理此信號}
  }
}

信號處理部份
step:
1 儲存目前程式狀態
 cpu暫停目前程式的執行,
 並從一般模式切換到特權模式,再把控制權交給作業系統,
 作業系統把程式執行狀態儲存到堆疊,以便處理完信號後可恢復原先執行狀態
 ps:執行狀態主要包括PC(program counter程式計數器)和status register(狀態暫存器)

2 ISR處理中斷信號
  作業系統依中斷信號種類,將對應的ISR的起始位址放入program counter中,呼叫對應的ISR
  cpu開始執行一個ISR進行中斷信號的處理

3 回復之前程式狀態
  中斷服務常式執行結束後,控制權還給作業系統
  作業系統再由堆疊取出PC和status register的內容,恢復原先程式的執行狀態
  cpu暫停作業系統的執行,並從特權模式切換到一般模式
  控制權交還給原先的程式,cpu恢復先前程式的執行

內部中斷:
EX:若除以0
  ps:program check interrupt異常信號會結束目前程式的執行,處理方式和此不同

Q:
__interrupt double isr(double r)
{
   double area = PI*r*r ;
   printf("%f\n",area) ;
   return area ;
}

說明並解釋上述之interrupt service routine 之錯誤處？

ANS:
1、ISR不能有返回值；
2、ISR不能傳遞參數；
3、ISR應該是短而高效的，在ISR中做浮點運算是不明智的；
4、ISR中不應該有重入和性能上的問題，因此不應該使用pintf()函數。

/////////////////////////////////////////////////////////////////

介紹ISR

Interrupt Serveices Routine (ISR)

Ans:

ISR(interrupt service routine中斷服務常式)
每一種中斷信號需要一個對應的ISR加以處理
作業系統提供的系統程式,只可在特權模式下執行
使用時需context switching將一般模式切換成特權模式
與subroutine(副程式)類似
ps:subroutine和procedure屬應用程式,須在一般模式下執行

介紹context switch

ANS:

context switching(環境切換):兩個程式間執行狀態的交換
說明:處理中斷信號時,作業系統把目前程式狀態儲存起來再載入對應的中斷服務常式的執行狀態
因次數頻繁,所以對整體系統的效能影響極大
使用PSW(program status word,程式狀態字組)的暫存器儲存目前程式的狀態
==================================================




